To clone a repo, make sure you are not inside of a repo when you clone
git clone <url>

Before we can push anything up to Github, we need to tell git about our remote
repository on Github. We need to setup a "destination" to push up.
In git we refer to these "destinations" as remotes. Each remote is simply URL
where a hosted repository lives.
To view any existing remotes for your repository
git remote
or
git remote -v (verbose, for more info)

To add a new remote
git remote add <remote-name> <url>

To rename a remote
git remote rename <old-remote> <new-remote>

To delete a remote
git remote remove <remote-name>

To rename a branch
git branch -M <branch-name>

To push up the code to remote
Having a remote set, to pushing to remote
When the repository is empty is posible to push a branch creating a new one into
the repository, if already exists a branch with the same name, the data will push
into the existing one.
git push <remote-name> <local-branch>

Push in detail:
While often want to push a local branch up to a remote branch of the same name,
we don't have to.
To push our local branch up to a remote branch with diferent name we could do:
git push <remote-name> <local-branch>:<remote-branch>

The -u option
The -u option allows us to set the upstream of the branch we're pushing. You
can think of this as a link connecting our local branch to a branch on 
Github.
Running git push -u origin master sets the upstream of the local master  branch
so that it trancks the master branch on the origin repo.
git push -u <remote-name> <local-branch>
or
git push --set-upstream <remote-name> <local-branch>

Once we've set the upstram for a branch, we can use only a shorthand
git push

